import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils import executor
from aiogram.dispatcher.filters import Command
from aiogram.dispatcher.middlewares import BaseMiddleware
from aiogram.contrib.fsm_storage.memory import MemoryStorage

API_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "5026972781"))  # ID –∂–µ–Ω—ã

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

user_payments = {}  # –ü—Ä–∏–º–∏—Ç–∏–≤–Ω–∞—è –ë–î

@dp.message_handler(commands=["start"])
async def cmd_start(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø, –æ—Ç–ø—Ä–∞–≤—å —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ.")

@dp.message_handler(content_types=["photo", "document"])
async def handle_payment_proof(message: Message):
    user_id = message.from_user.id
    user_payments[user_id] = False  # –ø–æ–∫–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ
    forward_text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username or user_id} –ø—Ä–∏—Å–ª–∞–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å?"
    keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"approve_{user_id}")
    )
    await bot.send_message(ADMIN_ID, forward_text, reply_markup=keyboard)
    await bot.forward_message(ADMIN_ID, message.chat.id, message.message_id)
    await message.answer("–°–ø–∞—Å–∏–±–æ! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")

@dp.callback_query_handler(lambda c: c.data.startswith("approve_"))
async def approve_payment(callback_query: types.CallbackQuery):
    user_id = int(callback_query.data.split("_")[1])
    user_payments[user_id] = True
    await bot.send_message(user_id, "–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –í–æ—Ç –≤–∞—à –∫–æ–Ω—Ç–µ–Ω—Ç:")
    await bot.send_message(user_id, "üîì –î–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç. –ö–æ–Ω—Ç–µ–Ω—Ç —Å–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è.")
    await callback_query.answer("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ.")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)